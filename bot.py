# cat > bot.py << 'EOF'
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import os
import sys
import re

TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN or ":" not in TOKEN:
    print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.")
    print("–ü—Ä–∏–º–µ—Ä: export BOT_TOKEN=123456:ABC-DEF...")
    sys.exit(1)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏)
main_menu = [
    ["üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–∞—Ç—á–∏"],
    ["üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–∞—Ç—á—É"],
    ["‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å—ã"],
    ["‚ùì –ü–æ–º–æ—â—å"]
]

# --- –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π ¬´–¥–≤–∏–∂–æ–∫¬ª –ø—Ä–æ–≥–Ω–æ–∑–∞ (–∑–∞–≥–ª—É—à–∫–∞ –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è API) ---

# –ù–∞—à–∏ –∑–∞—Ä–∞–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
KNOWN_MATCHES = {
    # CS2
    ("vitality", "faze"): ("Vitality vs FaZe", 78, 22, "–°–æ—Å—Ç–∞–≤ –∏ —Ñ–æ—Ä–º–∞ —É Vitality —Å–∏–ª—å–Ω–µ–µ; —Ä—ã–Ω–æ–∫ –Ω–∞ –∏—Ö —Å—Ç–æ—Ä–æ–Ω–µ."),
    ("mouz", "furia"): ("MOUZ vs FURIA", 62, 38, "MOUZ —Å–∏–ª—å–Ω–µ–µ –ø–æ —Ñ–æ—Ä–º–µ, H2H –∏ –ø–æ —Ä—ã–Ω–∫—É."),
    ("team spirit", "g2"): ("Team Spirit vs G2", 75, 25, "Spirit –Ω–∞ —Å–µ—Ä–∏–∏, —Å–∏–ª—å–Ω—ã–π –∫–æ—Å—Ç—è–∫; G2 –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–µ–µ."),
    # –§—É—Ç–±–æ–ª (–ø—Ä–∏–º–µ—Ä)
    ("real madrid", "barcelona"): ("Real Madrid vs Barcelona", 40, 60, "–§–æ—Ä–º–∞ –ë–∞—Ä—Å—ã –≤—ã—à–µ (–ø—Ä–∏–º–µ—Ä)."),
}

def normalize_name(name: str) -> str:
    return re.sub(r"\s+", " ", name.strip().lower())

def parse_match_name(text: str):
    # –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã –≤–∏–¥–∞: "–ö–æ–º–∞–Ω–¥–∞A vs –ö–æ–º–∞–Ω–¥–∞B" –∏–ª–∏ "–ö–æ–º–∞–Ω–¥–∞A - –ö–æ–º–∞–Ω–¥–∞B"
    m = re.split(r"\bvs\b|‚Äì|-|‚Äî", text, flags=re.IGNORECASE)
    if len(m) >= 2:
        a = normalize_name(m[0])
        b = normalize_name(m[1])
        return a, b
    return None, None

def predict_stub(query: str):
    a, b = parse_match_name(query)
    if not a or not b:
        return None

    key = (a, b)
    key_rev = (b, a)
    if key in KNOWN_MATCHES:
        title, pA, pB, note = KNOWN_MATCHES[key]
        sideA, sideB = title.split(" vs ")
        return title, sideA, pA, sideB, pB, note
    if key_rev in KNOWN_MATCHES:
        title, pB, pA, note = KNOWN_MATCHES[key_rev]
        sideB, sideA = title.split(" vs ")
        # –ü–æ–º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∂–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return f"{a.title()} vs {b.title()}", a.title(), pA, b.title(), pB, note

    # –ï—Å–ª–∏ –º–∞—Ç—á–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Äî –æ—Ç–¥–∞—ë–º –∞–∫–∫—É—Ä–∞—Ç–Ω—É—é –∑–∞–≥–ª—É—à–∫—É –ø–æ –Ω–∞—à–µ–º—É —à–∞–±–ª–æ–Ω—É
    A = a.title()
    B = b.title()
    # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (–¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    pA, pB = 50, 50
    note = "–ü–æ–∫–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö: –Ω—É–∂–µ–Ω —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤. –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è API."
    return f"{A} vs {B}", A, pA, B, pB, note

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ ‚öΩüéÆ\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
    )

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "‚Ä¢ –ù–∞–∂–º–∏ ¬´üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–∞—Ç—á–∏¬ª ‚Äî —É–≤–∏–∂–∏—à—å –ø—Ä–∏–º–µ—Ä—ã.\n"
        "‚Ä¢ –ù–∞–∂–º–∏ ¬´üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–∞—Ç—á—É¬ª ‚Äî –ø—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "  –ü—Ä–∏–º–µ—Ä: Vitality vs FaZe\n"
        "‚Ä¢ ¬´‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å—ã¬ª ‚Äî –ø—Ä–∏–º–µ—Ä –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞.\n\n"
        "–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∞–≤—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫—É."
    )
    await update.message.reply_text(msg)

async def todays(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üìÖ –ü—Ä–∏–º–µ—Ä—ã –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–¥–µ–º–æ):\n"
        "‚Ä¢ Vitality vs FaZe\n"
        "‚Ä¢ MOUZ vs FURIA\n"
        "‚Ä¢ Team Spirit vs G2\n"
        "–û—Ç–ø—Ä–∞–≤—å –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ ¬´üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–∞—Ç—á—É¬ª."
    )
    await update.message.reply_text(msg)

async def ask_prediction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏—à–ª–∏ –º–∞—Ç—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ¬´–ö–æ–º–∞–Ω–¥–∞A vs –ö–æ–º–∞–Ω–¥–∞B¬ª.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: Vitality vs FaZe"
    )

def render_prediction_card(title: str, A: str, pA: int, B: str, pB: int, note: str) -> str:
    # –ù–∞—à ¬´—à–∞–±–ª–æ–Ω –∫–∞—Ä—Ç–æ—á–∫–∏¬ª
    fav = A if pA > pB else B
    return (
        f"üèÜ –ú–∞—Ç—á: {title}\n\n"
        f"üìä –§–∞–∫—Ç–æ—Ä—ã (—Å–≤–æ–¥–∫–∞):\n"
        f"‚Ä¢ –§–æ—Ä–º–∞, —Å–æ—Å—Ç–∞–≤, H2H, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è ‚Äî –ø–æ –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏\n\n"
        f"üßÆ –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑:\n"
        f"‚Ä¢ {A} ‚Üí {pA}%\n"
        f"‚Ä¢ {B} ‚Üí {pB}%\n\n"
        f"‚úÖ –§–∞–≤–æ—Ä–∏—Ç: {fav}\n"
        f"‚ÑπÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip().lower()

    if text in ["üìÖ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–∞—Ç—á–∏", "—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–∞—Ç—á–∏", "—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ"]:
        await todays(update, context)
        return
    if text in ["üìä –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–∞—Ç—á—É", "–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–∞—Ç—á—É", "–ø—Ä–æ–≥–Ω–æ–∑"]:
        await ask_prediction(update, context)
        return
    if text in ["‚ö° —ç–∫—Å–ø—Ä–µ—Å—Å—ã", "—ç–∫—Å–ø—Ä–µ—Å—Å—ã", "—ç–∫—Å–ø—Ä–µ—Å—Å"]:
        await update.message.reply_text(
            "‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å (–ø—Ä–∏–º–µ—Ä):\n"
            "‚Ä¢ Vitality (78%) √ó MOUZ (62%) ‚Üí ~48% –æ–±—â–∏–π —à–∞–Ω—Å"
        )
        return
    if text in ["‚ùì –ø–æ–º–æ—â—å", "–ø–æ–º–æ—â—å", "/help"]:
        await help_cmd(update, context)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Å—Ç—Ä–æ–∫—É —Å ¬´vs¬ª ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å
    if " vs " in text or re.search(r"\s[-‚Äì‚Äî]\s", text):
        res = predict_stub(text)
        if res:
            title, A, pA, B, pB, note = res
            await update.message.reply_text(render_prediction_card(title, A, pA, B, pB, note))
            return

    # –§–æ–ª–ª–±–µ–∫
    await update.message.reply_text(
        "–ù–µ –ø–æ–Ω—è–ª ü§î\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –º–∞—Ç—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ¬´–ö–æ–º–∞–Ω–¥–∞A vs –ö–æ–º–∞–Ω–¥–∞B¬ª.",
        reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
    )

def main():
    app = Application.builder() \
        .token(TOKEN) \
        .http_version("1.1") \
        .get_updates_http_version("1.1") \
        .concurrent_updates(True) \
        .build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(CommandHandler("help", help_cmd))

    # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç (–∫–Ω–æ–ø–∫–∏/–≤–≤–æ–¥)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å –∞–ø–¥–µ–π—Ç–æ–≤ + —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
    app.run_polling(
        poll_interval=0.5,
        drop_pending_updates=True,
        close_loop=False,
    )

if __name__ == "__main__":
    main()
